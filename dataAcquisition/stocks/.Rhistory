for(i in c(1:length(alpha_array))){
q_array[i] <- qnorm(alpha_array[i], mean = mu0, sd = se, lower.tail = FALSE)
}
p_array2 <- rep(0, length(alpha_array))
for(i in c(1:length(alpha_array))){
p_array2[i] = 1-pnorm(q_array[i], mean = mu1, sd = se)
}
plot(alpha_array, p_array2)
n_array <- seq(1, 30, by = 1)
se_array <- sqrt(var/n_array)
q_array2 <- rep(0, length(n_array))
p_array3 <- rep(0, length(n_array))
for(i in c(1:length(n_array))){
q_array2[i] <- qnorm(alpha, mean = mu0, sd = se_array[i], lower.tail = FALSE)
p_array3[i] = 1-pnorm(q_array2[i], mean = mu1, sd = se_array[i])
}
plot(alpha_array2, p_array3)
n_array <- seq(1, 30, by = 1)
se_array <- sqrt(var/n_array)
q_array2 <- rep(0, length(n_array))
p_array3 <- rep(0, length(n_array))
for(i in c(1:length(n_array))){
q_array2[i] <- qnorm(alpha, mean = mu0, sd = se_array[i], lower.tail = FALSE)
p_array3[i] = 1-pnorm(q_array2[i], mean = mu1, sd = se_array[i])
}
plot(alpha_array2, p_array3)
n_array <- seq(1, 30, by = 1)
se_array <- sqrt(var/n_array)
q_array2 <- rep(0, length(n_array))
p_array3 <- rep(0, length(n_array))
for(i in c(1:length(n_array))){
q_array2[i] <- qnorm(alpha, mean = mu0, sd = se_array[i], lower.tail = FALSE)
p_array3[i] = 1-pnorm(q_array2[i], mean = mu1, sd = se_array[i])
}
plot(n_array, p_array3)
var_array <- seq(1, 400, by = 0.1)
se_array1 <- sqrt(var_array/n)
q_array3 <- rep(0, length(var_array))
p_array4 <- rep(0, length(var_array))
for(i in c(1:length(var_array))){
q_array3[i] <- qnorm(alpha, mean = mu0, sd = se_array1[i], lower.tail = FALSE)
p_array4[i] = 1-pnorm(q_array3[i], mean = mu1, sd = se_array1[i])
}
plot(var_array, p_array3)
var_array <- seq(1, 400, by = 0.1)
se_array1 <- sqrt(var_array/n)
q_array3 <- rep(0, length(var_array))
p_array4 <- rep(0, length(var_array))
for(i in c(1:length(var_array))){
q_array3[i] <- qnorm(alpha, mean = mu0, sd = se_array1[i], lower.tail = FALSE)
p_array4[i] = 1-pnorm(q_array3[i], mean = mu1, sd = se_array1[i])
}
plot(var_array, p_array4)
qnorm(0.05, 0, 1)
qnorm(0.05, 0, 1, lower.tail = FALSE)
pnorm(1.645, 0, 1)
mu0 <- 0
n <- 15
var <- 4
alpha <- 0.05
mu_array <- seq(-4, 4, by = 0.0001)
se <- sqrt(var/n)
q0_lower <- qnorm(alpha/2, mean = mu0, sd = se, lower.tail = TRUE)
q0_upper <- qnorm(alpha/2, mean = mu0, sd = se, lower.tail = FALSE)
p_array1 <- rep(0, length(mu_array))
for(i in c(1:length(mu_array))){
p_array1[i] = 1-(pnorm(q0_upper, mean = mu_array[i], sd = se) - pnorm(q0_lower, mean = mu_array[i], sd = se)
}
mu0 <- 0
n <- 15
var <- 4
alpha <- 0.05
mu_array <- seq(-4, 4, by = 0.0001)
se <- sqrt(var/n)
q0_lower <- qnorm(alpha/2, mean = mu0, sd = se, lower.tail = TRUE)
q0_upper <- qnorm(alpha/2, mean = mu0, sd = se, lower.tail = FALSE)
p_array1 <- rep(0, length(mu_array))
for(i in c(1:length(mu_array))){
p_array1[i] = 1-(pnorm(q0_upper, mean = mu_array[i], sd = se) - pnorm(q0_lower, mean = mu_array[i], sd = se))
}
plot(mu_array, p_array1)
mu1 <- 3
alpha_array <- seq(0.0001, 0.1, by = 0.0001)
q1_lower_array <- rep(0, length(alpha_array))
q1_upper_array <- rep(0, length(alpha_array))
p_array2 <- rep(0, length(alpha_array))
for(i in c(1:length(alpha_array))){
q1_lower_array[i] <- qnorm(alpha_array[i]/2, mean = mu0, sd = se, lower.tail = TRUE)
q1_upper_array[i] <- qnorm(alpha_array[i]/2, mean = mu0, sd = se, lower.tail = FALSE)
}
p_array2[i] = 1-(pnorm(q1_upper_array[i], mean = mu1, sd = se)-pnorm(q1_lower_array[i], mean = mu1, sd = se)
}
mu1 <- 3
alpha_array <- seq(0.0001, 0.1, by = 0.0001)
q1_lower_array <- rep(0, length(alpha_array))
q1_upper_array <- rep(0, length(alpha_array))
p_array2 <- rep(0, length(alpha_array))
for(i in c(1:length(alpha_array))){
q1_lower_array[i] <- qnorm(alpha_array[i]/2, mean = mu0, sd = se, lower.tail = TRUE)
q1_upper_array[i] <- qnorm(alpha_array[i]/2, mean = mu0, sd = se, lower.tail = FALSE)
}
p_array2[i] = 1-(pnorm(q1_upper_array[i], mean = mu1, sd = se)-pnorm(q1_lower_array[i], mean = mu1, sd = se))
}
mu1 <- 3
alpha_array <- seq(0.0001, 0.1, by = 0.0001)
q1_lower_array <- rep(0, length(alpha_array))
q1_upper_array <- rep(0, length(alpha_array))
p_array2 <- rep(0, length(alpha_array))
for(i in c(1:length(alpha_array))){
q1_lower_array[i] <- qnorm(alpha_array[i]/2, mean = mu0, sd = se, lower.tail = TRUE)
q1_upper_array[i] <- qnorm(alpha_array[i]/2, mean = mu0, sd = se, lower.tail = FALSE)
p_array2[i] = 1-(pnorm(q1_upper_array[i], mean = mu1, sd = se)-pnorm(q1_lower_array[i], mean = mu1, sd = se))
}
plot(alpha_array, p_array2)
n_array <- seq(1, 30, by = 1)
se_array <- sqrt(var/n_array)
q_array2 <- rep(0, length(n_array))
p_array3 <- rep(0, length(n_array))
for(i in c(1:length(n_array))){
q2_lower_array[i] <- qnorm(alpha/2, mean = mu0, sd = se_array[i], lower.tail = TRUE)
q2_upper_array[i] <- qnorm(alpha/2, mean = mu0, sd = se_array[i], lower.tail = FALSE)
p_array3[i] = 1-(pnorm(q2_upper_array[i], mean = mu1, sd = se_array[i])-pnorm(q2_lower_array[i], mean = mu1, sd = se_array[i]))
}
n_array <- seq(1, 30, by = 1)
se_array <- sqrt(var/n_array)
q2_lower_array <- rep(0, length(n_array))
q2_upper_array <- rep(0, length(n_array))
p_array3 <- rep(0, length(n_array))
for(i in c(1:length(n_array))){
q2_lower_array[i] <- qnorm(alpha/2, mean = mu0, sd = se_array[i], lower.tail = TRUE)
q2_upper_array[i] <- qnorm(alpha/2, mean = mu0, sd = se_array[i], lower.tail = FALSE)
p_array3[i] = 1-(pnorm(q2_upper_array[i], mean = mu1, sd = se_array[i])-pnorm(q2_lower_array[i], mean = mu1, sd = se_array[i]))
}
plot(n_array, p_array3)
var_array <- seq(1, 400, by = 0.1)
se_array1 <- sqrt(var_array/n)
q3_lower_array <- rep(0, length(var_array))
q3_upper_array <- rep(0, length(var_array))
p_array4 <- rep(0, length(var_array))
for(i in c(1:length(var_array))){
q3_lower_array[i] <- qnorm(alpha/2, mean = mu0, sd = se_array1[i], lower.tail = TRUE)
q3_upper_array[i] <- qnorm(alpha/2, mean = mu0, sd = se_array1[i], lower.tail = FALSE)
p_array4[i] = 1-(pnorm(q3_upper_array[i], mean = mu1, sd = se_array1[i])-pnorm(q3_lower_array[i], mean = mu1, sd = se_array1[i]))
}
plot(var_array, p_array4)
library(ggplot2)
install.packages(cowplot)
install.packages("cowplot")
library(cowplot)
library(ggplot2)
n = 100
py1 <- 1/2*rnorm(n, mean = 1, sd = 1)
py0 <- 1/2*rnorm(n, mean = -1, sd = 2)
data <- data.frame(Y_value = c(rep(1, n), rep(0, n)),
Px_value = c(py1, py0)
)
str(data)
library(ggplot2)
n = 100
py1 <- 1/2*rnorm(n, mean = 1, sd = 1)
py0 <- 1/2*rnorm(n, mean = -1, sd = 2)
data <- data.frame(Y_value = c(rep("1", n), rep("0", n)),
Px_value = c(py1, py0)
)
ggplot(data, aes(x = Px_value)) + geom_density(color = Y_value, size = 2)
View(data)
str(data)
ggplot(data, aes(x = Px_value)) + geom_density()
ggplot(data, aes(x = Px_value, color = Y_value)) + geom_density()
ggplot(data, aes(x = Px_value, color = Y_value, fill = Y_value)) + geom_density(alpha = 0.3)
library(ggplot2)
set.seed(1234)
n = 1000
py1 <- 1/2*rnorm(n, mean = 1, sd = 1)
py0 <- 1/2*rnorm(n, mean = -1, sd = 2)
data <- data.frame(Y_value = c(rep("1", n), rep("0", n)),
Px_value = c(py1, py0)
)
ggplot(data, aes(x = Px_value, color = Y_value, fill = Y_value)) + geom_density(alpha = 0.3)
library(ggplot2)
set.seed(1234)
n = 1000
py1 <- 1/2*rnorm(n, mean = 1, sd = 1)
py0 <- 1/2*rnorm(n, mean = -1, sd = 2)
data <- data.frame(Y_value = c(rep("1", n), rep("0", n)),
Px_value = c(py1, py0)
)
mu <- data.frame(Y_value = c("1", "0"), mean = c(1, -1))
ggplot(data, aes(x = Px_value, color = Y_value, fill = Y_value)) +
geom_density(alpha = 0.3) + geom_vline(data = mu, aes(xintercept = mean, color = Y_value), linetype = 'dashed') +
xlab("X") + ylab("P(X=x, Y = y)") + ggtitle("Distribution Plots")
library(ggplot2)
set.seed(1234)
n = 10000
py1 <- 1/2*rnorm(n, mean = 1, sd = 1)
py0 <- 1/2*rnorm(n, mean = -1, sd = 2)
data <- data.frame(Y_value = c(rep("1", n), rep("0", n)),
Px_value = c(py1, py0)
)
mu <- data.frame(Y_value = c("1", "0"), mean = c(1, -1))
ggplot(data, aes(x = Px_value, color = Y_value, fill = Y_value)) +
geom_density(alpha = 0.3) + geom_vline(data = mu, aes(xintercept = mean, color = Y_value), linetype = 'dashed') +
xlab("X") + ylab("P(X=x, Y = y)") + ggtitle("Distribution Plots")
library(ggplot2)
set.seed(1234)
n = 10000
py1 <- 1/2*rnorm(n, mean = 1, sd = 1)
py0 <- 1/2*rnorm(n, mean = -1, sd = 2)
data <- data.frame(Y_value = c(rep("1", n), rep("0", n)),
Px_value = c(py1, py0)
)
ggplot(data, aes(x = Px_value, color = Y_value, fill = Y_value)) +
geom_density(alpha = 0.3)  +
xlab("X") + ylab("P(X=x, Y = y)") + ggtitle("Distribution Plots")
# Plot the results using ggplot2
ggplot(data, aes(x = x_values)) +
geom_line(aes(y = p_x_and_y1), colour = "blue", size = 1) +
geom_line(aes(y = p_x_and_y0), colour = "red", size = 1) +
labs(title = 'Probability Distributions of P(X=x , Y=1) and P(X=x , Y=0)',
x = 'X',
y = 'Probability') +
theme_minimal()
str(data)
mu1 <- 1
sigma1 <- 1
# Parameters for Y = 0
mu0 <- -1
sigma0 <- 2
# Generate a sequence of x values
x_values <- seq(-10, 10, length.out = 1000)
# Compute the probability density function for Y = 1
p_x_given_y1 <- (1 / (sqrt(2 * pi * sigma1))) * exp(-((x_values - mu1)^2 / (2 * sigma1^2)))
# Compute the probability density function for Y = 0
p_x_given_y0 <- (1 / (sqrt(2 * pi * sigma0))) * exp(-((x_values - mu0)^2 / (2 * sigma0^2)))
p_x_and_y1 <- 0.5 * p_x_given_y1
p_x_and_y0 <- 0.5 * p_x_given_y0
data <- data.frame(x_values, p_x_and_y1, p_x_and_y0)
ggplot(data, aes(x = x_values)) +
geom_line(aes(y = p_x_and_y1), colour = "blue") +
geom_line(aes(y = p_x_and_y0), colour = "red") +
labs(title = 'Probability Distributions of P(X=x , Y=1) and P(X=x , Y=0)',
x = 'X',
y = 'Probability') +
theme_minimal()
data <- data.frame(
x = rep(x_values, 2),
Probability = c(p_x_and_y1, p_x_and_y0),
Distribution = factor(rep(c("P(X=x | Y=1)", "P(X=x | Y=0)"), each = length(x_values)))
)
# Plot the results using ggplot2
ggplot(data, aes(x = x, y = Probability, colour = Distribution)) +
geom_line(size = 1) +
scale_colour_manual(values = c("P(X=x | Y=1)" = "blue", "P(X=x | Y=0)" = "orange"),
name = "Distribution",
labels = c("P(X=x | Y=1)", "P(X=x | Y=0)")) +
labs(title = 'Probability Distributions',
x = 'X',
y = 'Probability') +
theme_minimal() +
theme(legend.position = "right")
data <- matrix(c(2, 2, 2, 1, 1, 2, 1, 1, 0, 0,
22, 22, 22, 21, 21, 22, 21, 21, 20, 20),
ncol = 2, byrow = TRUE)
data
pca_result <- prcomp(data, center = TRUE, scale. = TRUE)
first_principal_component <- pca_result$x[, 1]
print(first_principal_component)
summary(pca_result)
plot(data)
data <- data.frame(data)
str(data)
data
library(ggplot2)
data$fitted <- data$X1
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(xend = X1, yend = fitted, color = "resid")) + geom_point() + scale_color_manual(values = c(resid = "darkred"), label = c(resid = "Distance"))
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(xend = X1, yend = fitted, color = "resid")) + geom_point(color = "orange", alpha = 0.5) + scale_color_manual(values = c(resid = "darkred"), label = c(resid = "Distance"))
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(xend = X1, yend = fitted, color = "resid")) + geom_point(color = "black", size = 2, alpha = 0.7) + scale_color_manual(values = c(resid = "darkred"), label = c(resid = "Distance"))
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(xend = X1, yend = fitted, color = "resid")) + geom_point(color = "black", size = 2, alpha = 0.7) + scale_color_manual(values = c(resid = "red"), label = c(resid = "Distance"))
data$fitted <- first_principal_component
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(xend = X1, yend = fitted, color = "resid")) + geom_point(color = "black", size = 2, alpha = 0.7) + scale_color_manual(values = c(resid = "red"), label = c(resid = "Distance"))
data$fitted <- data$X1
data$resid <- data$X2-data$fitted
data$orthog <- data$fitted+data$resid/2
data
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(xend = X1, yend = orthog, color = "resid")) + geom_point(color = "black", size = 2, alpha = 0.7) + scale_color_manual(values = c(resid = "red"), label = c(resid = "Distance"))
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(x = X1, y = X2, xend = orthog, yend = orthog, color = "resid")) + geom_point(color = "black", size = 2, alpha = 0.7) + scale_color_manual(values = c(resid = "red"), label = c(resid = "Distance"))
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +geom_segment(aes(x = X1, y = X2, xend = orthog, yend = orthog, color = "resid")) + geom_point(color = "black", size = 2, alpha = 0.7) + scale_color_manual(values = c(resid = "red"), label = c(resid = "Distance"))+ theme(aspect.ratio=1)
library(ggplot2)
data <- matrix(c(2, 2, 2, 1, 1, 2, 1, 1, 0, 0,
22, 22, 22, 21, 21, 22, 21, 21, 20, 20),
ncol = 2, byrow = TRUE)
data <- data.frame(data)
data$fitted <- data$X1+(data$X2-data$X1)/2
ggplot(data, aes(x = X1, y = X2)) + geom_abline(slope = 1, intercept = 0, color = "blue") +
geom_segment(aes(x = X1, y = X2, xend = fitted, yend = fitted, color = "resid")) +
geom_point(color = "black", size = 2, alpha = 0.7) +
scale_color_manual(values = c(resid = "red"), label = c(resid = "Distance"))+ theme(aspect.ratio=1)
data <- matrix(c(2, 2, 2, 1, 1, 2, 1, 1, 0, 0,
22, 22, 22, 21, 21, 22, 21, 21, 20, 20),
ncol = 2, byrow = TRUE)
data <- data.frame(data)
data
names(data) <- c("x", 'y')
data
xbar <- mean(data$x)
ybar <- mean(data$y)
yvar <- var(data$y)
data$delta_x = x-xbar
data$delta_x = data$x-xbar
data$delta_y = data$y - ybar
sum(data$delta_x^2)
yvar
model <- lm(data, y~x)
model <- lm(y~x, data = data)
summary(model)
111.733/1005.6
sqrt(111.733/1005.6)
sqrt(111.733/1005.6/100)
sqrt(111.733/8/1005.6)
model.resi
model$residuals
sum(model$residuals^2)/8
sum(model$residuals^2)/8/sum(data$delta_x^2)
sqrt(sum(model$residuals^2)/8/sum(data$delta_x^2))
library(tidyverse)
head(iris)
new_data <- iris %>% filter(Species == 'setosa' && Petal.Length == 1.4)
new_data <- iris %>% filter(Species == 'setosa') %>%filter(Petal.Length == 1.4)
new_data <- iris %>% filter((Species == 'setosa') && (Petal.Length == 1.4))
new_data <- iris %>% filter((Species == 'setosa') & (Petal.Length == 1.4))
install.packages("wrds")
install.packages("WRDS")
install.packages("RPostgres")
res <- dbSendQuery(wrds, "SELECT date,dji FROM djones.djdaily")
library(RPostgres)
res <- dbSendQuery(wrds, "SELECT date,dji FROM djones.djdaily")
library(RPostgres)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='wrds_username')
library(RPostgres)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='wrds_username',)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='wrds_username', password = 'My1Puppy!')
res = dbSendQuery(wrds, "SELECT aa.*
FROM (
SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn
FROM crsp.stocknames") where aa.rn = 1 and aa.ticker in ('14593','10107'))
res = dbSendQuery(wrds, "SELECT aa.*
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) where aa.rn = 1 and aa.ticker in ('14593','10107')")
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) where aa.rn = 1 and aa.ticker in ('14593','10107')")
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) aa where aa.rn = 1 and aa.ticker in ('14593','10107')")
data <- dbFetch(res)
data
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) aa where aa.rn = 1 and aa.ticker =14593")
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) aa where aa.rn = 1 and aa.ticker = 14593")
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) aa where aa.rn = 1 and aa.ticker = '14593' ")
data <- dbFetch(res)
data
res = dbSendQuery(wrds, "SELECT * FROM crsp.stocknames where ticker = 14593")
res = dbSendQuery(wrds, "SELECT * FROM crsp.stocknames where ticker = '14593' ")
data <- dbFetch(res)
data
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) aa where aa.rn = 1 and aa.permno = '14593' ")
data <- dbFetch(res)
data
dbClearResult(res)
res = dbSendQuery(wrds, "SELECT aa.* FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn FROM crsp.stocknames) aa where aa.rn = 1 and aa.permno = '14593' ")
library(DBI)
library(tidyquant)
library(tidyverse)
library(dplyr)
library(RMySQL)
setwd("~/Documents/UPenn/CIS550/GroupProject/R_dataprep/")
#Establish the baseline for stocks on PERM number mapping
res = dbSendQuery(wrds, "SELECT bb.* FROM
(SELECT aa.*, ROW_NUMBER() OVER (PARTITION BY aa.PERMNO ORDER BY aa.nameenddt DESC) AS rn2
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn
FROM crsp.stocknames) aa
where aa.rn = 1 ) bb
where bb.rn2 = 1"
)
permno_mapping <- dbFetch(res)
dbClearResult(res)
mapping_clean <- permno_mapping %>% select(permno, nameenddt, ticker, comnam)
cn <- dbConnect(drv      = RMySQL::MySQL(),
username = "icey",
password = "cyvfyv-zipnoK-0jucty",
host     = "iceydatabase.caqw1q4tuhyj.us-east-1.rds.amazonaws.com",
port     = 3306,
dbname   = "vanguard")
holdings <- dbGetQuery(cn, "select distinct Stock_PERMNO FROM Holdings")
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(ticker), 'TPL',  ticker)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(comnam), 'Texas Pacific Land Corporation',  comnam))
stocks %>% filter(is.na(ticker))
stocks %>% filter(Stock_PERMNO == '14752')
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(ticker), 'TPL',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '14752' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '14752' & is.na(comnam), 'Texas Pacific Land Corporation',  comnam))
stocks %>% filter(is.na(ticker))
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(ticker), 'TPL',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '14752' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '14752' & is.na(comnam), 'Texas Pacific Land Corporation',  comnam)) %>%
mutate(ticker = ifelse(ticker == 'NXGN', 'NXGN.TA', ticker))
stocks %>% filter(ticker == 'NXGN')
stocks %>% filter(ticker == 'NXGN.NA')
stocks %>% filter(ticker == 'NXGN.TA')
write.csv(stocks, "stock_tickers.csv")
write.csv(stocks, "stock_tickers.csv", row.names = FALSE)
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(ticker), 'TPL',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '14752' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '14752' & is.na(comnam), 'Texas Pacific Land Corporation',  comnam)) %>%
mutate(ticker = ifelse(ticker == 'NXGN', 'NXGN.TA', ticker)) %>%
rename(PERMNO = Stock_PERMNO, company = comnam) %>%
select(PERMNO, ticker, company)
str(stocks)
write.csv(stocks, "stock_tickers.csv", row.names = FALSE)
library(DBI)
library(tidyquant)
library(tidyverse)
library(dplyr)
library(RMySQL)
setwd("~/Documents/UPenn/CIS550/GroupProject/R_dataprep/")
setwd("~/Documents/UPenn/CIS550/GroupProject/cis5500-project/dataAcquisition/stocks/")
cn <- dbConnect(drv      = RMySQL::MySQL(),
username = "icey",
password = "cyvfyv-zipnoK-0jucty",
host     = "iceydatabase.caqw1q4tuhyj.us-east-1.rds.amazonaws.com",
port     = 3306,
dbname   = "vanguard")
stocks <- dbGetQuery(cn, "select * FROM stocks")
head(stocks)
str(stocks)
library(quantmod)
yahooQF()
#Establish the baseline for stocks on PERM number mapping
res = dbSendQuery(wrds, "SELECT bb.* FROM
(SELECT aa.*, ROW_NUMBER() OVER (PARTITION BY aa.PERMNO ORDER BY aa.nameenddt DESC) AS rn2
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY ticker ORDER BY nameenddt DESC) AS rn
FROM crsp.stocknames) aa
where aa.rn = 1 ) bb
where bb.rn2 = 1"
)
permno_mapping <- dbFetch(res)
dbClearResult(res)
mapping_clean <- permno_mapping %>% select(permno, nameenddt, ticker, comnam)
mapping_clean %>% filter(ticker == 'TPL')
mapping_clean %>% filter(is.na(ticker))
holdings %>% filter(Stock_PERMNO == '20391')
holdings <- dbGetQuery(cn, "select distinct Stock_PERMNO FROM Holdings")
holdings %>% filter(Stock_PERMNO == '20391')
holdings %>% filter(Stock_PERMNO == '14752')
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno"))
stocks %>% filter(is.na(ticker))
stocks %>% filter(Stock_PERMNO == '14752' & is.na(ticker))
str(stocks)
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam))
str(stocks)
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(ticker), 'TPL',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '14752' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '14752' & is.na(comnam), 'Texas Pacific Land Corporation',  comnam))
str(stocks)
stocks <- holdings %>% left_join(mapping_clean, by = c("Stock_PERMNO" = "permno")) %>%
mutate(ticker = ifelse(Stock_PERMNO == '83443' & is.na(ticker), 'BRK-B',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '83443' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '83443' & is.na(comnam), 'Berkshire Hathaway Inc Class B',  comnam)) %>%
mutate(ticker = ifelse(Stock_PERMNO == '14752' & is.na(ticker), 'TPL',  ticker)) %>%
mutate(nameenddt = ifelse(Stock_PERMNO == '14752' & is.na(nameenddt), '2023-12-29',  nameenddt)) %>%
mutate(comnam = ifelse(Stock_PERMNO == '14752' & is.na(comnam), 'Texas Pacific Land Corporation',  comnam)) %>%
mutate(ticker = ifelse(ticker == 'NXGN', 'NXGN.TA', ticker)) %>%
rename(PERMNO = Stock_PERMNO, company = comnam) %>%
select(PERMNO, ticker, company)
str(stocks)
write.csv(stocks, "stock_tickers.csv", row.names = FALSE)
metric_df <- data.frame()
metric_df
